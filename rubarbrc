# vim: set ft=ruby:


clock {
  respawn 5
}
clock 2

script do 
  exec 'fortune ; sleep 1; date ; sleep 2; fortune'
  respawn 5
  format -> {txt.upcase}
end

__END__
# isn't `run :counter &block` the same as `format block`  could a single dsl work both ways if it knew about the options in advance?
run :counter do 
  @respawn = 30
  @color = 'red'
  @format = -> (txt) { txt*2 }
  #respawn 1
  #color 'red'
  #format { |txt| txt*2 }
end 

run :clock do
  @respawn = 1
end

run :script do 
  @exec = 'fortune ; sleep 1; date ; sleep 2; fortune'
  @respawn = 5
end

# is this syntax nicer?
# can this work if Clcok is really Rubarb::Plugins::Clock?
#run Clock do
#end

#run :date, 59

#run :mem, {respawn: 60}


# class that extends RubarbPlugin and has a run() method can be called to save on forking.
#plugin :clock do 
  # what the ehll options tdo  Ihgive a clock?
#end
# override the name, format functions

# as long as we're spawning all these scripts might as well manage the bar itself too
#bar "dzen2 -ta l -xs 0"
bar "bar -p"

template do 
  "#{clock} - #{counter} :: #{script}"
end
